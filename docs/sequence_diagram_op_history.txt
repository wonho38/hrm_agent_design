sequenceDiagram
    participant User as 사용자
    participant Flask as Flask App
    participant RootAgent as RootAgent
    participant OpAgent as OperationHistorySummarizer
    participant OpGuardrail as OperationHistoryGuardrail
    participant PromptBuilder as PromptBuilder
    participant LLMProvider as LLM Provider
    participant ReadabilityChecker as ReadabilityChecker
    participant Logger as Logger

    User->>Flask: GET /api/stream/operation-history/{item_id}?language=ko&llm=gauss
    Flask->>Flask: load_json_data()에서 operation_history 추출
    Flask->>RootAgent: new RootAgent(provider_override="gauss")
    RootAgent->>RootAgent: _load_config()
    RootAgent->>OpAgent: new OperationHistorySummarizer(provider="gauss")
    RootAgent->>RootAgent: register_agent("op_history_summarizer", agent)
    
    Flask->>RootAgent: run_op_history(operation_history, language="ko")
    RootAgent->>OpAgent: agents["op_history_summarizer"]
    RootAgent->>OpGuardrail: new OperationHistoryGuardrail()
    RootAgent->>Logger: log_event({"stage": "run_op_history"})
    
    Note over RootAgent,OpGuardrail: 사전 가드레일 검증
    RootAgent->>OpGuardrail: pre_guard(operation_history)
    
    alt 데이터 검증 실패
        OpGuardrail-->>RootAgent: raise GuardrailException("데이터 부족")
        RootAgent->>Logger: log_event({"status": "failed"})
        RootAgent-->>Flask: yield "데이터 부족 메시지"
        Flask-->>User: Server-Sent Event: {"chunk": error_msg, "done": true}
    else 데이터 검증 성공
        OpGuardrail-->>RootAgent: validated_data
        RootAgent->>Logger: log_event({"status": "passed"})
        
        Note over RootAgent,LLMProvider: LLM 처리 시작
        RootAgent->>OpAgent: summarize(validated_data, language="ko", stream=True)
        OpAgent->>PromptBuilder: build_operation_history_prompt(data, "gauss", "ko")
        PromptBuilder-->>OpAgent: prompt
        OpAgent->>Logger: log_event({"stage": "op_history_build_prompt"})
        OpAgent->>LLMProvider: build_llm("gauss").generate(prompt, stream=True)
        
        loop 스트리밍 청크들
            LLMProvider-->>OpAgent: chunk
            OpAgent-->>RootAgent: yield chunk
            RootAgent-->>Flask: yield chunk
            Flask-->>User: Server-Sent Event: {"chunk": text, "done": false}
        end
        
        Note over RootAgent,ReadabilityChecker: 후처리 가드레일
        RootAgent->>OpGuardrail: post_guard(raw_output)
        OpGuardrail->>ReadabilityChecker: check_readability(raw_output)
        ReadabilityChecker-->>OpGuardrail: readability_result
        OpGuardrail->>OpGuardrail: _generate_readability_report(result)
        OpGuardrail-->>RootAgent: enhanced_output (with readability report)
        RootAgent-->>Flask: yield additional_content
        Flask-->>User: Server-Sent Event: {"chunk": readability_report, "done": false}
        RootAgent->>Logger: log_event({"stage": "op_history_post_guard"})
    end
    
    Flask-->>User: Server-Sent Event: {"chunk": "", "done": true}
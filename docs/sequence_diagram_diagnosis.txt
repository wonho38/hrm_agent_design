sequenceDiagram
    participant User as 사용자
    participant Flask as Flask App
    participant RootAgent as RootAgent
    participant DiagAgent as DiagnosisSummarizer
    participant Guardrail as DiagnosisGuardrail
    participant PromptBuilder as PromptBuilder
    participant LLMProvider as LLM Provider
    participant ReadabilityChecker as ReadabilityChecker
    participant Logger as Logger

    User->>Flask: GET /api/stream/diagnosis/{item_id}?language=ko&llm=openai
    Flask->>Flask: load_json_data()에서 item_id로 데이터 찾기
    Flask->>RootAgent: new RootAgent(provider_override="openai")
    RootAgent->>RootAgent: _load_config()
    RootAgent->>RootAgent: _configure_langsmith()
    RootAgent->>DiagAgent: new DiagnosisSummarizer(provider="openai")
    RootAgent->>RootAgent: register_agent("diagnosis_summarizer", agent)
    
    Flask->>RootAgent: run_diagnosis(analytics, language="ko")
    RootAgent->>DiagAgent: agents["diagnosis_summarizer"]
    RootAgent->>Guardrail: new DiagnosisGuardrail(include_readability_report=True)
    RootAgent->>Logger: log_event({"stage": "run_diagnosis"})
    
    Note over RootAgent,DiagAgent: 스트리밍 시작
    RootAgent->>DiagAgent: summarize(analytics, language="ko", stream=True)
    DiagAgent->>Guardrail: pre_guard(payload)
    Guardrail-->>DiagAgent: validated_payload
    DiagAgent->>PromptBuilder: build_diagnosis_prompt(analytics, "openai", "ko")
    PromptBuilder-->>DiagAgent: prompt
    DiagAgent->>Logger: log_event({"stage": "diagnosis_build_prompt"})
    DiagAgent->>LLMProvider: build_llm("openai").generate(prompt, stream=True)
    
    loop 스트리밍 청크들
        LLMProvider-->>DiagAgent: chunk
        DiagAgent-->>RootAgent: yield chunk
        RootAgent-->>Flask: yield chunk
        Flask-->>User: Server-Sent Event: {"chunk": text, "done": false}
    end
    
    Note over RootAgent,ReadabilityChecker: 후처리 가드레일
    RootAgent->>Guardrail: post_guard(raw_output)
    Guardrail->>ReadabilityChecker: check_readability(raw_output)
    ReadabilityChecker-->>Guardrail: readability_result
    Guardrail->>Guardrail: _generate_readability_report(result)
    Guardrail-->>RootAgent: enhanced_output (with readability report)
    RootAgent-->>Flask: yield additional_content
    Flask-->>User: Server-Sent Event: {"chunk": readability_report, "done": false}
    RootAgent->>Logger: log_event({"stage": "diagnosis_post_guard"})
    
    Flask-->>User: Server-Sent Event: {"chunk": "", "done": true}